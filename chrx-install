#!/bin/bash
#
# chrx-install
#
# chromebook unix installer
#
# currently tested:
#   chromebook == Acer C720 PEPPY
#   unix ==       (k|l|x|edu|)ubuntu Linux, v == (14.04|14.10|15.04)
#

CHRX_VERSION="1.1.1"

CHRX_TARGET_DISK=""
CHRX_OS="linux"
CHRX_OS_DIST="ubuntu"
CHRX_OS_ARCH="amd64"
CHRX_OS_METAPKG="ubuntu-desktop"
CHRX_OS_IMG="latest"
CHRX_OS_RELEASE=""
CHRX_USERNAME="chrx"
CHRX_HOSTNAME="chrx"
CHRX_LOCALE="en_US.UTF-8"
CHRX_TZ="America/New_York"

CHRX_CACHE_DIR="/var/cache/chrx"
CHRX_INSTALL_ROOT="/tmp/urfs"

VERBOSITY=""
VERBOSITY_APTGET="-q"
VERBOSITY_MKFS="-q"
VERBOSITY_CURL="-s"
VERBOSITY_INSTALL=""
CHRX_PROMPT_ENABLED=1
CHRX_NOTIFY_ENABLED=1
CHRX_SKIP_CUSTOMIZATION=""
CHRX_DO_INSTALL_UPSTART=""

USAGE="
chrx installer, version ${CHRX_VERSION}

Usage: $0 [ option ... ]

Options
   -m METAPACKAGE  OS-specific metapackage to install [${CHRX_OS_METAPKG}]
                   (ubuntu-minimal, xubuntu-desktop, etc)
   -a ARCH         processor architecture (i386, amd64) [${CHRX_OS_ARCH}]
   -t TARGETDISK   target disk (/dev/mmcblk1, /dev/sdb, etc) [${CHRX_TARGET_DISK}]
   -i IMAGE        OS-specific image name (lts, dev, latest) [${CHRX_OS_IMG}]
   -r RELEASE      OS-specific release version (14.10, etc) [${CHRX_OS_RELEASE}]
                   (takes precedence over version derived from IMAGE, if any)
   -U USERNAME     username of first created user [${CHRX_USERNAME}]
   -H HOSTNAME     hostname for new system [${CHRX_HOSTNAME}]
   -L LOCALE       locale for new system [${CHRX_LOCALE}]
   -Z TIMEZONE     timezone for new system [${CHRX_TZ}]
                   (America/San_Francisco, Etc/UTC, etc)
   -n              disable success/failure notifications
   -s              skip all customization, install stock OS only
   -y              run non-interactively, take defaults and do not confirm
   -v              increase output verbosity
   -h              show this help

Default values are shown in brackets, e.g.: [default].

If TARGETDISK is not specified, chrx will select the internal SSD.
"

ANSI_RED=$'\033[1;31m'
ANSI_YEL=$'\033[1;33m'
ANSI_GRN=$'\033[1;32m'
ANSI_VIO=$'\033[1;35m'
ANSI_BLU=$'\033[1;36m'
ANSI_WHT=$'\033[1;37m'
ANSI_RST=$'\033[0m'

echo_note() {
  echo -e "${ANSI_YEL}${1}${ANSI_RST}"
}
echo_info() {
  echo -e "${ANSI_GRN}${1}${ANSI_RST}"
}
echo_warn() {
  echo -e "${ANSI_YEL}${1}${ANSI_RST}"
}
echo_debug() {
  echo -e "${ANSI_VIO}${1}${ANSI_RST}"
}
echo_fail() {
  echo -e "${ANSI_RED}${1}${ANSI_RST}"
}

usage()
{
  echo "${USAGE}"
  exit
}

prompt_if_interactive()
{
  PROMPT_RESPONSE=
  if [ "${CHRX_PROMPT_ENABLED}" ]; then
    read PROMPT_RESPONSE
  else
    echo
  fi
}

ping_chrx_org()
{
  msg=$1
  CHRX_UA="chrx/${CHRX_VERSION} hw=${CHRX_HWID} sw=${CHRX_OS},${CHRX_OS_DIST},${CHRX_OS_IMG},${CHRX_OS_RELEASE:-"-"},${CHRX_OS_VERSION:-"(tbd)"},${CHRX_OS_ARCH},${CHRX_OS_METAPKG}"
  if [ "${CHRX_NOTIFY_ENABLED}" ]; then
    curl -s -m 7 -A "${CHRX_UA}" http://ping.chrx.org/${msg}
  fi
}

downcase()
{
  echo $1 | tr '[:upper:]' '[:lower:']
}

## parse command line options
while getopts "hm:a:t:i:r:H:U:L:Z:nsyv" OPTION
do
     case $OPTION in
         h)
             usage
             ;;
         m)
             CHRX_OS_METAPKG=$(downcase $OPTARG)
             ;;
         a)
             CHRX_OS_ARCH=$(downcase $OPTARG)
             ;;
         t)
             CHRX_TARGET_DISK=$OPTARG
             ;;
         i)
             CHRX_OS_IMG=$(downcase $OPTARG)
             ;;
         r)
             CHRX_OS_RELEASE=$(downcase $OPTARG)
             ;;
         H)
             CHRX_HOSTNAME=$OPTARG
             ;;
         U)
             CHRX_USERNAME=$OPTARG
             ;;
         L)
             CHRX_LOCALE=$OPTARG
             ;;
         Z)
             CHRX_TZ=$OPTARG
             ;;
         n)
             CHRX_NOTIFY_ENABLED=
             ;;
         s)
             CHRX_SKIP_CUSTOMIZATION=1
             ;;
         y)
             CHRX_PROMPT_ENABLED=
             ;;
         v)
             VERBOSITY="v"
             VERBOSITY_APTGET=""
             VERBOSITY_MKFS=""
             VERBOSITY_CURL=""
             VERBOSITY_INSTALL="-v"
             ;;
         ?)
             usage
             ;;
     esac
done


## begin
echo_note "chrx installer, version ${CHRX_VERSION}\n"

CHRX_HWID=`crossystem hwid | sed 's/ /_/g'`

## ping begin, try to track any failures
ping_chrx_org "begin"

## setup
if [ "`initctl status powerd | grep running`" ]; then
  initctl stop powerd > /dev/null 2>&1
fi
#setterm -blank 0

## setup storage
SETUP_STORAGE_ERROR="failed"
curl -Oks -A "${CHRX_UA}" ${CHRX_WEB_ROOT}/chrx-setup-storage
[ -r ./chrx-setup-storage ] && . ./chrx-setup-storage
if [ "${SETUP_STORAGE_ERROR}" ]; then
  echo_fail "fatal error from chrx-setup-storage. exiting!"
  exit 1
fi

## install

start_date=`date`
start_secs=`date +%s`

if [ "${CHRX_OS_RELEASE}" ]; then
  case "${CHRX_OS_RELEASE}" in
    trusty) CHRX_OS_VERSION="14.04.2" ;;
    utopic) CHRX_OS_VERSION="14.10" ;;
    vivid)  CHRX_OS_VERSION="15.04" ;;
    wily)   CHRX_OS_VERSION="15.10" ;;
    *)      CHRX_OS_VERSION=${CHRX_OS_RELEASE} ;;
  esac
  ## TODO: consolidate -i IMG and -r REL to derive VER ?
else
  release_log_fn="meta-release"
  case "${CHRX_OS_IMG}" in
    dev|development) release_log_fn="meta-release-development" ;;
    *)               release_log_fn="meta-release" ;;
  esac

  ## determine Core image URL from version requested
  release_log_url="http://changelogs.ubuntu.com/${release_log_fn}"
  release_log="`curl -s ${release_log_url}`"

  pat="^Version: "
  case "${CHRX_OS_IMG}" in
    lts)
      pat="^Version: ..* LTS" ;;
    dev)
      codename=`echo "${release_log}"|grep "^Dist: "|tail -1|awk '{print $2}'`;;
  esac

  CHRX_OS_VERSION=`echo "${release_log}"|grep "${pat}"|tail -1|awk '{print $2}'`
fi

core_image_url="http://cdimage.ubuntu.com/ubuntu-core/releases/${CHRX_OS_VERSION}/release/ubuntu-core-${CHRX_OS_VERSION}-core-${CHRX_OS_ARCH}.tar.gz"

if [ "${codename}" ]; then
  core_image_url="http://cdimage.ubuntu.com/ubuntu-core/daily/current/${codename}-core-${CHRX_OS_ARCH}.tar.gz"
fi

## validate config
case "${CHRX_OS}" in
  linux) ;;
  *) msg_os="${ANSI_RED}(invalid!)${ANSI_RST}" ; FAIL=1 ;;
esac

case "${CHRX_OS_DIST}" in
  ubuntu) ;;
  *) msg_os_dist="${ANSI_RED}(invalid!)${ANSI_RST}" ; FAIL=1 ;;
esac

case "${CHRX_OS_VERSION}" in
  '14.04'|14.04.*)
    msg_os_version="${ANSI_YEL}(not well tested!)${ANSI_RST}" ;;
  '14.10') ;;
  '15.04') ;;
  *)
    if [ "`echo ${CHRX_OS_VERSION} | grep "^[0-9.][0-9.]*$"`" ]; then
      msg_os_version="${ANSI_YEL}(unrecognized, untested!)${ANSI_RST}"
    else
      msg_os_version="${ANSI_RED}(invalid!)${ANSI_RST}"
      FAIL=1
    fi
    ;;
esac

if [ "${CHRX_OS_RELEASE}" ]; then
  msg_os_img="${ANSI_YEL}(ignored, using release)${ANSI_RST}"
else
  case "${CHRX_OS_IMG}" in
    latest|lts|dev) ;;
    *) msg_os_img="${ANSI_RED}(invalid!)${ANSI_RST}" ; FAIL=1 ;;
  esac
fi

case "${CHRX_OS_ARCH}" in
  i386|amd64) ;;
  *) msg_os_arch="${ANSI_RED}(invalid!)${ANSI_RST}" ; FAIL=1 ;;
esac

case "${CHRX_OS_METAPKG}" in
  ubuntu-desktop|ubuntu-minimal|ubuntu-standard) ;;
  edubuntu-desktop|edubuntu-server) ;;
  lubuntu-desktop) ;;
  kubuntu-desktop) ;;
  xubuntu-desktop) ;;
  *) msg_os_metapkg="${ANSI_RED}(invalid!)${ANSI_RST}" ; FAIL=1 ;;
esac


## confirm config
cat << EOCONFIG

  Installing
    operating system:   ${CHRX_OS} ${msg_os}
    distribution:       ${CHRX_OS_DIST} ${msg_os_dist}
    version:            ${CHRX_OS_VERSION} ${msg_os_version}
      (determined from image and release)
        image (-i):     ${CHRX_OS_IMG} ${msg_os_img}
        release (-r):   ${CHRX_OS_RELEASE}
    architecture (-a):  ${CHRX_OS_ARCH} ${msg_os_arch}
    metapackage (-m):   ${CHRX_OS_METAPKG} ${msg_os_metapkg}
    target_disk (-t):   ${CHRX_TARGET_DISK}

  System Configuration
    hostname (-H):      ${CHRX_HOSTNAME}
    username (-U):      ${CHRX_USERNAME}
    locale (-L):        ${CHRX_LOCALE}
    timezone (-Z):      ${CHRX_TZ}

EOCONFIG


if [ "${FAIL}" ]; then
  echo_fail "fatal error(s) in configuration options (see above). exiting!"
  exit 1
fi

if [ "${CHRX_SKIP_CUSTOMIZATION}" ]; then
  cat << EOMSG
${ANSI_YEL}\
  .------------------------------------------------------------------.
  | NOTE: Will install stock OS only, skipping chrx customizations.  |
  '------------------------------------------------------------------'
${ANSI_RST}
EOMSG
fi

if [ "${CHRX_OS_VERSION}" = "15.04" ]; then
  CHRX_DO_INSTALL_UPSTART=1
  cat << EOMSG
${ANSI_YEL}\
  .---------------------------------------------------------------------.
  | NOTE:                                                               |
  |                                                                     |
  | Ubuntu 15.04 introduces systemd as the new default boot manager.    |
  |                                                                     |
  | Currently, systemd fails to boot Acer C720s (and possibly other     |
  | Chromebooks). Details at https://www.reddit.com/r/chrubuntu/34o63m  |
  |                                                                     |
  | ${ANSI_WHT}Will install the Upstart boot manager instead.${ANSI_YEL}                      |
  '---------------------------------------------------------------------'
${ANSI_RST}
EOMSG
fi

echo_note "Press [enter] to confirm and continue: \c"
prompt_if_interactive


echo_info "\nFetching ${CHRX_OS}-${CHRX_OS_DIST} core image files..."
curl ${VERBOSITY_CURL} ${core_image_url} | tar xzp -C ${CHRX_INSTALL_ROOT}

mount -o bind /proc    ${CHRX_INSTALL_ROOT}/proc
mount -o bind /dev     ${CHRX_INSTALL_ROOT}/dev
mount -o bind /dev/pts ${CHRX_INSTALL_ROOT}/dev/pts
mount -o bind /sys     ${CHRX_INSTALL_ROOT}/sys

if [ -f /usr/bin/old_bins/cgpt ]
then
  cp /usr/bin/old_bins/cgpt ${CHRX_INSTALL_ROOT}/usr/bin/
else
  cp /usr/bin/cgpt ${CHRX_INSTALL_ROOT}/usr/bin/
fi

chmod a+rx ${CHRX_INSTALL_ROOT}/usr/bin/cgpt
cp /etc/resolv.conf ${CHRX_INSTALL_ROOT}/etc/
echo ${CHRX_HOSTNAME} > ${CHRX_INSTALL_ROOT}/etc/hostname
echo -e "\n127.0.0.1       ${CHRX_HOSTNAME}" >> ${CHRX_INSTALL_ROOT}/etc/hosts


## get customization files
mkdir -p ${CHRX_INSTALL_ROOT}${CHRX_CACHE_DIR}
cd ${CHRX_INSTALL_ROOT}${CHRX_CACHE_DIR}
curl -k ${VERBOSITY_CURL} ${CHRX_WEB_ROOT}/dist.tar.gz | tar xz --no-same-owner

SKEL_FILES="
  etc/skel/.config/lxpanel/Lubuntu/config
  etc/skel/.config/lxpanel/Lubuntu/panels/panel
  etc/skel/.xbindkeysrc
  etc/skel/.xsessionrc
"

CONF_FILES="
  etc/modprobe.d/ath9k.conf
  etc/modprobe.d/snd-hda-intel.conf
  etc/udev/rules.d/10-disable-ehci.rules
  etc/udev/rules.d/99-hide-disks.rules
  etc/X11/xorg.conf
  etc/X11/xorg.conf.d/20-intel-graphics.conf
  etc/X11/xorg.conf.d/50-cyapa-touchpad.conf
"

EXEC_FILES="
  etc/rc.local
  etc/initramfs-tools/scripts/init-top/unbind_ehci
  etc/pm/sleep.d/50-audio-intel-driver
  etc/pm/sleep.d/89-wifi-ath9k-module
"
  #etc/init.d/chrx-firstboot

APPENDED_FILES="
  etc/sysctl.conf
  etc/systemd/logind.conf
"

if [ "${CHRX_SKIP_CUSTOMIZATION}" ]; then
  echo_warn "\n(skipping installation of chrx customization files [1/2])"
else
  echo_info "\nInstalling chrx customization files for C720 [1/2]..."
  for fpath in ${CONF_FILES} ${EXEC_FILES} ${SKEL_FILES} ${APPENDED_FILES}; do
    if [ ! -d "${CHRX_INSTALL_ROOT}/`dirname ${fpath}`" ]; then
      #echo mkdir -p "${CHRX_INSTALL_ROOT}/`dirname ${fpath}`"
      install ${VERBOSITY_INSTALL} -d "${CHRX_INSTALL_ROOT}/`dirname ${fpath}`"
    fi
  done
  for fpath in ${SKEL_FILES}; do
    install ${VERBOSITY_INSTALL} -m 644 ./dist/${fpath} ${CHRX_INSTALL_ROOT}/${fpath}
  done
fi

## chroot
export CHRX_OS_METAPKG CHRX_TZ CHRX_LOCALE CHRX_USERNAME
export CHRX_TARGET_DISK CHRX_CACHE_DIR CHRX_INSTALL_ROOT
export CHRX_OS_RELEASE CHRX_SKIP_CUSTOMIZATION CHRX_DO_INSTALL_UPSTART
export VERBOSITY VERBOSITY_APTGET VERBOSITY_CURL
export ANSI_RED ANSI_YEL ANSI_GRN ANSI_VIO ANSI_BLU ANSI_WHT ANSI_RST

install ${VERBOSITY_INSTALL} -m 755 ./dist/chrx-install-chroot ${CHRX_INSTALL_ROOT}${CHRX_CACHE_DIR}

echo ">> entering chroot"
chroot ${CHRX_INSTALL_ROOT} /bin/bash -c ${CHRX_CACHE_DIR}/chrx-install-chroot
# | tee -a ${CHRX_LOGFILE}
echo "<< exiting chroot"


if [ "${CHRX_SKIP_CUSTOMIZATION}" ]; then
  echo_warn "\n(skipping installation of chrx customization files [2/2])"
else
  echo_info "\nInstalling chrx customization files for C720 [2/2]..."
  for fpath in ${CONF_FILES}; do
    install ${VERBOSITY_INSTALL} -m 644 ./dist/${fpath} ${CHRX_INSTALL_ROOT}/${fpath}
  done
  for fpath in ${EXEC_FILES}; do
    install ${VERBOSITY_INSTALL} -m 755 ./dist/${fpath} ${CHRX_INSTALL_ROOT}/${fpath}
  done
  for fpath in ${APPENDED_FILES}; do
    cat ./dist/${fpath}-append >> ${CHRX_INSTALL_ROOT}/${fpath}
  done
fi


## setup firstboot finalization
## FIXME or remove: firstboot looping error, also file LSB tags
#ln -s ../init.d/chrx-firstboot ${CHRX_INSTALL_ROOT}/etc/rc2.d/S99chrx-firstboot


## untested bits from ChrUbuntu ... TODO: test
#if echo `crossystem hwid` | grep -q "^PANTHER "; then
#  echo_green "Fixing SeaBIOS on ASUS Chromebox"
#  echo_green "Thanks to John Lewis"
#  echo_green "http://johnlewis.ie/asus-chromebox-owners-rejoice/"
#  wget http://johnlewis.ie/asus-chromebox-SeaBIOS-new.bin
#  flashrom -w -i RW_LEGACY:asus-chromebox-SeaBIOS-new.bin
#fi


## set eeprom bits
crossystem dev_boot_legacy=1 dev_boot_signed_only=1

## wind up
finish_date=`date`
finish_secs=`date +%s`
elapsed_time=$(( (${finish_secs}-${start_secs})/60 ))m$(( (${finish_secs}-${start_secs})%60 ))s

cat << EOF

${ANSI_YEL}chrx installer is finished!${ANSI_RST}

   started: ${start_date}
  finished: ${finish_date}
   elapsed: ${elapsed_time}

After reboot, at the Dev Mode screen, press:

  ${ANSI_YEL}CTRL-D${ANSI_RST} to boot ChromeOS, or
  ${ANSI_GRN}CTRL-L${ANSI_RST} to boot your newly-installed system.

Your login is:

  username: ${ANSI_WHT}${CHRX_USERNAME}${ANSI_RST}
  password: ${ANSI_WHT}${CHRX_USERNAME}${ANSI_RST}

${ANSI_RED}Be sure to change your password after log in!${ANSI_RST}

EOF

echo_note "Press [enter] when ready to reboot: \c"
prompt_if_interactive

echo_info "\nCopying logfiles and installation scripts to new system..."
cp -vr ${CHRX_CACHE0_DIR}/chrx-* ${CHRX_INSTALL_ROOT}${CHRX_CACHE_DIR}/

## we're done! ping success
ping_chrx_org "end_ok"

reboot

